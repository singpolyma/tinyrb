@Next
[x] Range
[x] Allow {...} for blocks
[x] Implement metaclass
[x] def <object>.some_method
[x] Array splat
[x] && and || as instructions
[x] unary - and !
[ ] default arg value
[ ] namespace constants in Module (A::B)
[x] upval in block
[ ] Regexp
[ ] Proc
[ ] begin...rescue...ensure
[ ] def...rescue...ensure
[ ] Fix operator precedence
[ ] super(...)
[x] return w/ args
*** See TODO in code too!

@Later
[ ] String interpolation
[ ] FFI
[ ] IO
[ ] File
[ ] Dir
[ ] require
[ ] Replace GC w/ smaller, simple & embeddable one (tricolor or refcount)
[ ] Embed bytecode of /lib stuff inside executable
[ ] ||= &&= +=, etc.
[x] Remove GET/SETLOCAL instruction (include locals in registers, like Lua)
[ ] Do not create control frame on C function calls
[ ] Store Fixnum as immediate value
[ ] Cache constant lookup
[ ] Peephole optimization (Remove useless register allocations)
[ ] Inline more methods as VM instructions
[ ] case...when
[ ] Float, Bignum
[ ] Reimplement Array, Hash using Tuple like Rubinius or fix Hash to use #hash
[ ] puts nil # => nil in MRI
[ ] Run RubySpecs
[ ] Implement & operator
[ ] Get it to build w/ -ansi gcc option (might need to get rid of khash.h)

@Someday
[ ] Compile to file
[ ] Sandbox
[ ] Rubygem support w/ http://github.com/fabien/minigems
[ ] REPL
[ ] Unicode
[ ] lightweight threads, coroutines (using libconcurrency?)
[ ] JIT
[ ] SIMD acceleration
